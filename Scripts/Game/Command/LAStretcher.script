//******************************************************************************************
// #Version 1.3#
//
// 		Includes: All Stretcher commands
//
//	- PcmdStretcherDrop
//	- PcmdStretcherGet
//	- DummyStretcher
//
//		Script by Hoppah
//		
//		Usage of this script in other mods is NOT allowed without permission of Hoppah
//
//******************************************************************************************

const char CMD_DOORS[]			= "OpenCloseDoor3";
const char UNNAMED[] 			= "Unnamed";
const char OBJ_EMT_STRETCHER[]		= "mod:Prototypes/Persons/02 LA Fire Department/ff_emt_stretcher.e4p";
const char OBJ_PM_STRETCHER[]		= "mod:Prototypes/Persons/01 LA Ambulance/ff_paramedic_stretcher.e4p";
const char OBJ_EMT[]			= "mod:Prototypes/Persons/02 LA Fire Department/ff_emt.e4p";
const char OBJ_PM[]			= "mod:Prototypes/Persons/01 LA Ambulance/ff_paramedic.e4p";

const char PROTO_STRETCHER[] 		= "mod:Prototypes/Vehicles/06 Objects/stretcher.e4p";
const char NAME_STRETCHER[] 		= "EmptyStretcherOnGround";
const char DUMMY_STRETCHER[] 		= "DummyStretcher";

object PcmdStretcherDrop : CommandScript
{ 
	PcmdStretcherDrop()
	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetIcon("drop");
		SetCursor("drop");
		//SetGroupID(CGROUP_GETEQUIPMENT);
	}

	bool CheckPossible(GameObject *Caller)
	{
		GameObjectList SelectPer = Game::GetSelectedGameObjects();
		if (SelectPer.GetNumObjects() > 1)
			return false;

		Person p(Caller);
		if (p.IsValid() && (p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.GetFirehoseID() != 0 || p.IsPulling() || p.GetEnteredCarID() != -1))
			return false;

		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		if (p.IsCurrentAction("EActionTreatPerson"))
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Caller->GetID() != Target->GetID())
			return false;
		
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_REARDOOR);
			float rot[9];
		Vector PPos = Caller->GetPosition();
		Caller->GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		Vehicle mDroppedStretcher = Game::CreateVehicle(PROTO_STRETCHER, NAME_STRETCHER);
	
		mDroppedStretcher.SetPosition(PPos);
		mDroppedStretcher.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		
		int PlayerID = Caller->GetPlayerMP();

		int VehicleID = Caller->GetID();
		mDroppedStretcher.SetUserData(VehicleID);
		mDroppedStretcher.SetSelectable(false);

		if(StrCompare(Caller->GetPrototypeFileName(), OBJ_EMT_STRETCHER) == 0)
		{
			Person Med1 = Game::CreatePerson(OBJ_EMT, UNNAMED);
			Person Med2 = Game::CreatePerson(OBJ_EMT, UNNAMED);
		} else
		{
			Person Med1 = Game::CreatePerson(OBJ_PM, UNNAMED);
			Person Med2 = Game::CreatePerson(OBJ_PM, UNNAMED);
			Med1.RemoveCommand("Heal");
			Med1.RemoveCommand("RemoveEquipment");
			Med1.AssignCommand("PcmdHeal");
			Med2.RemoveCommand("Heal");
			Med2.RemoveCommand("RemoveEquipment");
			Med2.AssignCommand("PcmdHeal");
		}

		Person p(Caller);
		if (p.IsInHouseWithGroundEntrance())
		{
			int HouseID = p.GetEnteredHouseID();
			Med1.SetEnteredHouseID(HouseID);
			Med2.SetEnteredHouseID(HouseID);
		}

		if (Game::IsMultiplayer())
		{
			int PlayerID = Caller->GetPlayerMP();
			mDroppedStretcher.SetPlayerMP(PlayerID);
			Med1.SetPlayerMP(PlayerID);
			Med2.SetPlayerMP(PlayerID);
		}

		Vector BackPos = mDroppedStretcher.GetTargetPoint(&Med1, TARGET_EQUIPMENTDOOR);
		Vector FrontPos = mDroppedStretcher.GetTargetPoint(&Med2, TARGET_PASSENGERDOOR);

		Med1.SetPosition(BackPos);
		Med1.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		Med2.SetPosition(FrontPos);
		Med2.SetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
		Med1.SetUpgradeLevel(3);
		Med2.SetUpgradeLevel(3);
		Med1.SetAutoHealDistance(0.1f);
		Med2.SetAutoHealDistance(0.1f);
		//Med1.SetEquipment(EQUIP_EMERGENCY_CASE);
		//Med2.SetEquipment(EQUIP_EMERGENCY_CASE);
		Med1.PushActionSwitchAnim(ACTION_APPEND, "idleequipped");
		Med2.PushActionSwitchAnim(ACTION_APPEND, "idleequipped");

		mDroppedStretcher.PushActionWait(ACTION_APPEND, 3.f);
		mDroppedStretcher.PushActionDeleteOwner(ACTION_APPEND);

		if (Caller->IsSelected())
		{
			Caller->Deselect();
			Med1.Select();
		}
		Caller->PushActionWait(ACTION_NEWLIST, 0.1f);
		Caller->PushActionDeleteOwner(ACTION_APPEND);
		int Money = Mission::GetMoneyLeft();
		int NewMoney = Money - 25;
		Mission::SetMoney(NewMoney);
	}
};

object PcmdStretcherGet : CommandScript
{ 
	PcmdStretcherGet()
	{
		SetIcon("stretcher");
		SetCursor("stretcher");
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_GETEQUIPMENT);
		SetRestrictions(RESTRICT_NOTDESTROYED | RESTRICT_NOTBURNING);
		SetPossibleCallers(ACTOR_PERSON);
	}

	bool CheckPossible(GameObject *Caller)
	{
		GameObjectList SelectPer = Game::GetSelectedGameObjects();
		if (SelectPer.GetNumObjects() != 2)
			return false;

		if (!SelectPer.GetObject(0)->HasCommand("PcmdGetEMTBag") && SelectPer.GetObject(1)->HasCommand("PcmdGetEMTBag"))
			return false;
		else if (SelectPer.GetObject(0)->HasCommand("PcmdGetEMTBag") && !SelectPer.GetObject(1)->HasCommand("PcmdGetEMTBag"))
			return false;

		Person p(Caller);
		if (p.IsValid() && (p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.GetFirehoseID() != 0 || p.IsPulling() || p.GetEnteredCarID() != -1))
			return false;

		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		if (p.IsCurrentAction("EActionTreatPerson"))
			return false;

		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		Vehicle v(Target);
		if (v.IsValid() && !v.IsDestroyed() && v.GetVehicleType() == VT_AMBULANCE_ITW || v.GetVehicleType() == VT_AMBULANCE_RTW || v.GetVehicleType() == VT_AMBULANCE_RHC)
			return true;

		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		if(childID == 0)
		{
			GameObjectList persons = Game::GetSelectedGameObjects();
			if (persons.GetNumObjects() == 2)
			{
				Person paramedic1(persons.GetObject(0));
				Person paramedic2(persons.GetObject(1));

				if ((paramedic1.HasCommand("PcmdGetEMTBag") && paramedic2.HasCommand("PcmdGetEMTBag")) || (paramedic1.HasCommand("PcmdStabilize") && paramedic2.HasCommand("PcmdStabilize")))
				{
					paramedic1.SetUserData(0);
					paramedic2.SetUserData(1);
				} else
					return;
			} else
				return;

			Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_REARDOOR);
			Vehicle v(Target);
			v.PushActionWait(ACTION_NEWLIST, 0.1f);
			v.SetCommandable(false);

 			Caller->SetCommandable(false);
			Caller->PushActionMove(ACTION_NEWLIST, TargetPos);
			Caller->PushActionTurnTo(ACTION_APPEND, Target);
			Caller->PushActionExecuteCommand(ACTION_APPEND, "PcmdStretcherGet", Target, 1, false);
		}

		if(childID == 1)
		{
			Vehicle v(Target);
			Vector CarPos = v.GetPosition();
			CarPos.x -= 0.f;
			CarPos.y -= 0.f;

       			float r[9];
        		Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			int PlayerID = Caller->GetPlayerMP();

			Caller->PushActionWait(ACTION_NEWLIST, 0.4f);
			Caller->PushActionDeleteOwner(ACTION_APPEND);

			if (Caller->GetUserData() != 1)
			{
				return;
			}
			else
			{
				if(StrCompare(Caller->GetPrototypeFileName(), OBJ_EMT) == 0)
					Person p = Game::CreatePerson(OBJ_EMT_STRETCHER, UNNAMED);
				else
					Person p = Game::CreatePerson(OBJ_PM_STRETCHER, UNNAMED);

				Game::FindFreePosition(&p, CarPos, 100);
           			p.SetPosition(CarPos);
				p.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
				p.SetUpgradeLevel(3);
				p.SetPlayerMP(PlayerID);
				p.UpdatePlacement();
				p.Hide();
				p.PushActionWait(ACTION_NEWLIST, 3.0f);
				p.PushActionShowHide(ACTION_APPEND, false); 

				v.SetCommandable(true);
				v.PushActionWait(ACTION_NEWLIST, 2.3f);
				v.PushActionExecuteCommand(ACTION_APPEND, CMD_DOORS, Caller, 1, false);

				int Money = Mission::GetMoneyLeft();
				int NewMoney = Money + 25;
				Mission::SetMoney(NewMoney);
			}
		}
	}
};