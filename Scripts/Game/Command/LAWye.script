//******************************************************************************************
// #Version 1.0#
//
// 		Includes: Includes command to install a gated wye
//
//	- PcmdWye
//
//		Script by Hoppah
//		
//		Usage of this script in other mods is NOT allowed without permission of Hoppah
//
//******************************************************************************************

const char OBJ_WYE[]			= "mod:Prototypes/Vehicles/06 Objects/wye.e4p";
const char NAME_WYE[]			= "wye";
const char OBJ_EMT[]			= "mod:Prototypes/Persons/02 LA Fire Department/ff_emt.e4p";
const char OBJ_EMT_SCBA[]		= "mod:Prototypes/Persons/02 LA Fire Department/ff_emt_scba.e4p";
const char OBJ_PM[]			= "mod:Prototypes/Persons/01 LA Ambulance/ff_paramedic.e4p";
const char OBJ_PM_SCBA[]		= "mod:Prototypes/Persons/01 LA Ambulance/ff_paramedic_scba.e4p";
const char OBJ_USFS_FF[]		= "mod:Prototypes/Persons/02 LA Fire Department/usfs_ff.e4p";
const char OBJ_USFS_FF_SCBA[]		= "mod:Prototypes/Persons/02 LA Fire Department/usfs_ff_scba.e4p";
const char OBJ_USAR_FF[]		= "mod:Prototypes/Persons/02 LA Fire Department/usar_ff.e4p";
const char CMD_WYE[]			= "PcmdWye";

object PcmdWye : CommandScript
{
	PcmdWye()
	{
		SetIcon("wye");
		SetCursor("wye");
		SetRestrictions(RESTRICT_SELFEXECUTE);
		//SetRestrictions2(RESTRICT2_ISHYDRANTORSELF);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		GameObject o = Caller->GetHydrant();
		if (o.HasName(NAME_WYE))
			return false;

		return Caller->GetFirehoseID() != 0;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target->IsValid())
			return false;
				
		if (Caller->GetEquipment()==EQUIP_FIREHOSE && Caller->GetType() == ACTOR_PERSON && Caller->GetFirehoseID() != 0)
		{
			if (Caller->GetID()==Target->GetID())
				return true;
		}
		
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		if (childID == 0)
		{
			p.PushActionSwitchAnim(ACTION_NEWLIST, "kneeldown");
			p.PushActionWait(ACTION_APPEND, 2.5f);
			p.PushActionExecuteCommand(ACTION_APPEND, CMD_WYE, Target, 1, false);
			p.SetCommandable(false);

			Vector Pos = p.GetPosition();
				float r[9];
				float childr[9];
			p.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

			Vehicle m = Game::CreateVehicle(OBJ_WYE, NAME_WYE);
			float dx = 15.f, dy = -24.f, dz = 14.f;
			Math::RotateVector(dx, dy, dz, r);
			Math::EulerToMatrix(20.0f, 0.f, 0.f, childr);
			Math::MultiplyMatrices(childr, r);
			Pos = Pos + Vector(dx, dy, dz);
			m.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
			m.SetPosition(Pos);
			m.UpdatePlacement();
			m.SetPlayerMP(p.GetPlayerMP());
			m.SetUserData(p.GetID());
			m.Hide();
			m.PushActionWait(ACTION_NEWLIST, 2.5f);
			m.PushActionShowHide(ACTION_APPEND, false);
			m.SetSelectable(false);

			Vector PerPos = p.GetPosition();
			if(StrCompare(p.GetPrototypeFileName(), OBJ_EMT) == 0)
				Person n = Game::CreatePerson(OBJ_EMT, Caller->GetName());
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_EMT_SCBA) == 0)
				Person n = Game::CreatePerson(OBJ_EMT_SCBA, Caller->GetName());
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_PM) == 0)
			{
				Person n = Game::CreatePerson(OBJ_PM, Caller->GetName());
				n.RemoveCommand("Heal");
				n.RemoveCommand("RemoveEquipment");
				n.AssignCommand("PcmdHeal");
			}
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_PM_SCBA) == 0)
				Person n = Game::CreatePerson(OBJ_PM_SCBA, Caller->GetName());
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_USFS_FF) == 0)
				Person n = Game::CreatePerson(OBJ_USFS_FF, Caller->GetName());
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_USFS_FF_SCBA) == 0)
				Person n = Game::CreatePerson(OBJ_USFS_FF_SCBA, Caller->GetName());
			else if(StrCompare(p.GetPrototypeFileName(), OBJ_USAR_FF) == 0)
				Person n = Game::CreatePerson(OBJ_USAR_FF, Caller->GetName());
			else
				return;
			if (n.IsValid()) && Game::FindFreePosition(&n, PerPos))
			{
				float dx = -30.f, dy = -20.f, dz = 0.f;
				Math::RotateVector(dx, dy, dz, r);
				Math::EulerToMatrix(0.0f, 0.f, 0.f, childr);
				Math::MultiplyMatrices(childr, r);
				PerPos = PerPos + Vector(dx, dy, dz);
				n.SetPosition(PerPos);
				n.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
				n.Hide();
				n.PushActionWait(ACTION_APPEND, 2.5f);
				n.PushActionShowHide(ACTION_APPEND, false);
				n.SetPlayerMP(p.GetPlayerMP());
				n.SetHealth(p.GetHealth());
				n.SetUpgradeLevel(3);
			}
		}
		if (childID == 1)
		{
			p.SetUserData(p.GetID());
			p.EnableAutoTarget(false);
			if (p.IsSelected())
				p.Deselect();
			if (!p.IsFlagSet(OF_HIDDEN))
				p.SetFlag(OF_HIDDEN);
			p.SetCommandable(true);
			p.SetResistance(INJUREREASON_UNKNOWN, 100000.0f);
			//p.SetResistance(INJUREREASON_FIRE, 10000000.0f);
			//p.SetResistance(INJUREREASON_SHOT, 10000000.0f);
			//p.SetResistance(INJUREREASON_ENERGY, 10000000.0f);
			p.SetResistance(INJUREREASON_CONTAM_ATOM, 100000.0f);
			p.SetResistance(INJUREREASON_CONTAM_CHEM, 100000.0f);
			p.SetResistance(INJUREREASON_CONTAM_BIO, 100000.0f);
		}
		if (childID == 2)
		{
			Vehicle v(Target);
			if(!v.IsInstalled())
			{
				int VID = v.GetUserData();
				PersonList list = Game::GetFirefighters();
				for(int i = 0; i < list.GetNumPersons(); i++)
				{
					if (list.GetPerson(i)->GetUserData() == VID)
					{
						Person *n = list.GetPerson(i);
						n->ClearFlag(OF_HIDDEN);
						n->PushActionSwitchAnim(ACTION_NEWLIST, "idle");
						if (p.IsSelected())
							n->Select();
						n->EnableAutoTarget(true);
						n->SetResistance(INJUREREASON_UNKNOWN, 0.0f);
						n->SetResistance(INJUREREASON_CONTAM_ATOM, 0.0f);
						n->SetResistance(INJUREREASON_CONTAM_CHEM, 0.0f);
						n->SetResistance(INJUREREASON_CONTAM_BIO, 0.0f);
						v.PushActionDeleteOwner(ACTION_NEWLIST);
						p.PushActionDeleteOwner(ACTION_NEWLIST);
					} else
					{
						v.PushActionDeleteOwner(ACTION_NEWLIST);
					}
				} else
				{
					v.PushActionDeleteOwner(ACTION_NEWLIST);
				}
			} else
				return;
		}
	}
};