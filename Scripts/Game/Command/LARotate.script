//******************************************************************************************
// #Version 1.1#
//
// 		Includes: All Rotate commands
//
//	- VcmdRotateClockwise
//	- VcmdRotateCounterClockwise
//
//		Script converted by Hoppah
//		
//		Usage of this script in other mods is NOT allowed without permission of Hoppah
//
//******************************************************************************************

object VcmdRotateClockwise : CommandScript
{
	VcmdRotateClockwise()
	{
    		SetIcon("rotate_cw");
    		SetCursor("rotate_cw");
 		SetGroupLeader(true);
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetPriority(120);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
 		if (!Caller->IsValid())
 			return false;
 
 		if (Caller->GetType() == ACTOR_VEHICLE)
 		{
 			return true;
 		}
 
 		return false;
 	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID) 
	{ 
		if(!Caller->IsValid() || !Target->IsValid() || (Target->GetID() != Caller->GetID())) 
			return false; 

		if(Caller->GetType() == ACTOR_VEHICLE) 
			return true; 

		return false; 
	} 

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		float r[9];
		float childr[9];
		Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

		Math::EulerToMatrix(-25.0f, 0.f, 0.f, childr);
		Math::MultiplyMatrices(childr, r);

		Caller->SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
	}
};

object VcmdRotateCounterClockwise : CommandScript
{
	VcmdRotateCounterClockwise()
	{
    		SetIcon("rotate_ccw");
    		SetCursor("rotate_ccw");
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetPriority(120);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
 		if (!Caller->IsValid())
 			return false;
 
 		if (Caller->GetType() == ACTOR_VEHICLE)
 		{
 			return true;
 		}
 
 		return false;
 	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID) 
	{ 
		if(!Caller->IsValid() || !Target->IsValid() || (Target->GetID() != Caller->GetID())) 
			return false; 

		if(Caller->GetType() == ACTOR_VEHICLE) 
			return true; 

		return false; 
	} 

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		float r[9];
		float childr[9];
		Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

		Math::EulerToMatrix(25.0f, 0.f, 0.f, childr);
		Math::MultiplyMatrices(childr, r);

		Caller->SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
	}
};