const char OBJ_CRANE_NORMAL[]			= "mod:Prototypes/Vehicles/02 LA Fire Department/heavy_rescue_crane.e4p";
const char OBJ_CRANE_REVERSED[]			= "mod:Prototypes/Vehicles/02 LA Fire Department/heavy_rescue_crane_rev.e4p";
const char NAME_CRANE_REVERSED[]		= "cranereversed";
const char NAME_CRANE_NORMAL[]			= "Unnamed";
const char CMD_AUTOSIREN_OFF[] 			= "VcmdAutoSirenOff";
const char CMD_AUTOSIREN_ON[] 			= "VcmdAutoSirenOn";
const char CMD_WARNINGLIGHTS_OFF[] 		= "VcmdWarningLightsOff";
const char CMD_WARNINGLIGHTS_ON[] 		= "VcmdWarningLightsOn";

int DummyGroup = 20;

object DummyCrane : CommandScript
{
	DummyCrane()
	{
 		SetGroupID(DummyGroup);
	}
 
 	bool CheckPossible(GameObject *Caller)
 	{
 	} 
 
 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
 	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
      		if(childID == 1)
		{
			Vector Pos = v.GetPosition();
				float r[9];
				float childr[9];
			v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			Vehicle m = Game::CreateVehicle(OBJ_CRANE_REVERSED, NAME_CRANE_REVERSED);
			m.SetUserData(v.GetID());
			m.SetPlayerMP(v.GetPlayerMP());
           		m.SetPosition(Pos);
			Math::EulerToMatrix(180.0f, 0.f, 0.f, childr);
			Math::MultiplyMatrices(childr, r);
			m.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
            		m.UpdatePlacement();
			m.PushActionInstall(ACTION_NEWLIST, Target);
			m.PushActionLiftWithCrane(ACTION_APPEND, Target);
			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}
			if (!v.IsBlueLightEnabled())
				m.EnableBlueLights(false);
			if (v.HasCommand(CMD_AUTOSIREN_OFF))
				m.AssignCommand(CMD_AUTOSIREN_OFF);
			else
				m.AssignCommand(CMD_AUTOSIREN_ON);
			m.RemoveCommand(CMD_WARNINGLIGHTS_ON);
			m.AssignCommand(CMD_WARNINGLIGHTS_OFF);
			m.EnableBlinker(BLT_BOTH);
			if (v.IsSelected())
				m.Select();
			v.PushActionDeleteOwner(ACTION_NEWLIST);
		}
      		if(childID == 2 || childID == 3)
		{
			Vector Pos = v.GetPosition();
				float r[9];
				float childr[9];
			v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			Vehicle m = Game::CreateVehicle(OBJ_CRANE_NORMAL, NAME_CRANE_NORMAL);
			m.SetUserData(v.GetID());
			m.SetPlayerMP(v.GetPlayerMP());
           		m.SetPosition(Pos);
			Math::EulerToMatrix(180.0f, 0.f, 0.f, childr);
			Math::MultiplyMatrices(childr, r);
			m.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
            		m.UpdatePlacement();
            		m.SetSpeed(6.0f);

			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}
			if (!v.IsBlueLightEnabled())
				m.EnableBlueLights(false);
			if (v.HasCommand(CMD_AUTOSIREN_OFF))
				m.AssignCommand(CMD_AUTOSIREN_OFF);
			else
				m.AssignCommand(CMD_AUTOSIREN_ON);
			if (v.IsSelected())
				m.Select();
			if(childID == 2)
				m.PushActionMove(ACTION_NEWLIST, Target, true);
			if(childID == 3)
				m.PushActionReturnToBase(ACTION_NEWLIST);
			v.PushActionDeleteOwner(ACTION_NEWLIST);
		}
  	}
};