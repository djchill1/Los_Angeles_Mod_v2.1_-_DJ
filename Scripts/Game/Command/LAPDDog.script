//******************************************************************************************
// #Version 1.0#
//
// 		Includes: Command to scare people away from the police dog
//
//		- DummyDog
//		- PcmdSendDog
//		- PcmdCallDog
//		- PcmdScare
//		- DummyDogTaken
//
//		Script converted by Hoppah
//		
//		Usage of this script in other mods is NOT allowed without permission of Hoppah
//
//******************************************************************************************

const char NAME_HALT[]				= "ScaryPuppy";
const char OBJ_HALT[]				= "mod:Prototypes/Objects/01 LA Equipment/invisible.e4p";
const char CMD_DOORS[]				= "OpenCloseDoor3";
const char DUMMY_DOG[]				= "DummyDog";
const char DUMMY_DOGTAKEN[]			= "DummyDogTaken";
const char OBJ_DOG[]				= "mod:Prototypes/Persons/03 LA Police/dog.e4p";
const char NAME_DOG[]				= "LASDDog";
const float DOG_RANGE 				= 1100.0f; 	//Maximum range to dog leader when the dog is not attacking
const float DOG_ATTACK_RANGE 		= 300.0f; 	//Maximum range to dog leader when the dog is attacking
const float DOG_STOPPING_RANGE 		= 700.0f; 	//Range where the target stops and the dog starts the attack
const float DOG_WAITING_TIME		= 600.f;  	//Waiting time in seconds before the dog starts sniffing around

int DummyGroup = 20;

object DummyDog : CommandScript
{
	DummyDog()
	{

	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		if (childID == 1) //get dog from car
		{
			Vehicle v(Target);
			v.SetCommandable(false);
			p.SetCommandable(false);
			Vector TargetPos = v.GetTargetPoint(Caller, TARGET_REARDOOR);
			p.PushActionMove(ACTION_NEWLIST, TargetPos);
			p.PushActionTurnTo(ACTION_APPEND, Target);
			p.PushActionExecuteCommand(ACTION_APPEND, DUMMY_DOG, &v, 2, false);
		}
		if (childID == 2) //get dog from car 2
		{
			Vehicle v(Target);
			if (!v.HasCommand(DUMMY_DOGTAKEN))
				v.AssignCommand(DUMMY_DOGTAKEN);
			v.PushActionExecuteCommand(ACTION_APPEND, CMD_DOORS, &v, 1, false);
			v.SetCommandable(true);
			p.SetCommandable(true);
			Person d = Game::CreatePerson(OBJ_DOG, NAME_DOG);
			d.SetFleeing(true);
			d.SetBehaviour(BEHAVIOUR_SQUAD_POLICE);
			d.SetPlayerMP(p.GetPlayerMP());
			d.SetUpgradeLevel(3);
			Vector Pos = p.GetPosition();
				float r[9];
			p.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			Game::FindFreePosition(&d, Pos, 300.f);
			d.SetPosition(Pos);
			d.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			d.SetUserData(p.GetID());
			//d.ClearActions();
			d.Hide();
			d.PushActionWait(ACTION_NEWLIST, 0.8f);
			d.PushActionShowHide(ACTION_APPEND, false); 
			d.PushActionWait(ACTION_APPEND, DOG_WAITING_TIME);
		}
		if (childID == 3 || childID == 4) //put dog in car
		{
			Vehicle v(Target);
			GameObjectList persons = p.GetObjectsInRange(200.f, ACTOR_PERSON);
			for(int i = 0; i < persons.GetNumObjects(); i++)
			{
				if (persons.GetObject(i)->HasCommand("PcmdSendDog") || persons.GetObject(i)->HasAnimation("attack"))
				{
					v.PushActionExecuteCommand(ACTION_APPEND, CMD_DOORS, &v, 1, false);
					//v.SetCommandable(false);
					if (childID == 3)
					{
						int PersonID = p.GetID();
						GameObjectList list = Game::GetGameObjects(NAME_DOG);
						for(int i = 0; i < list.GetNumObjects(); i++)
						{
							GameObject *obj = list.GetObject(i);
							if (obj->GetUserData() == PersonID)
							{
								obj->PushActionWait(ACTION_NEWLIST, 1.f);
								obj->PushActionDeleteOwner(ACTION_APPEND);
								if (v.HasCommand(DUMMY_DOGTAKEN))
									v.RemoveCommand(DUMMY_DOGTAKEN);
							}
						}
						p.PushActionWait(ACTION_NEWLIST, 1.2f);
						p.PushActionExecuteCommand(ACTION_APPEND, "EnterCar", &v, 0, false);
					}
					if (childID == 4)
					{
						int PersonID = p.GetUserData();
						GameObjectList l = Game::GetGameObjects("Unnamed");
						for(int i = 0; i < l.GetNumObjects(); i++)
						{
							GameObject *obj = l.GetObject(i);
							if (obj->GetID() == PersonID)
							{
								obj->PushActionWait(ACTION_NEWLIST, 1.2f);
								obj->PushActionExecuteCommand(ACTION_APPEND, "EnterCar", &v, 0, false);
							}
						}
						p.PushActionWait(ACTION_NEWLIST, 1.f);
						p.PushActionDeleteOwner(ACTION_APPEND);
						if (v.HasCommand(DUMMY_DOGTAKEN))
							v.RemoveCommand(DUMMY_DOGTAKEN);						
					}
				}
			}
		}
		if (childID == 5) //put dog in car 2
		{
			v.SetCommandable(true);
		}
	}
};

object PcmdSendDog : CommandScript
{
	PcmdSendDog()
	{
		SetIcon("senddog");
		SetCursor("senddog");
		SetValidTargets(ACTOR_PERSON);
		//SetGroupID(CGROUP_DOG);
		//SetGroupLeader(true);
		SetPriority(300);
		SetPossibleEquipment(EQUIP_NONE);
		SetRestrictions(RESTRICT_NOTINJURED | RESTRICT_NOTARRESTED);
		SetPossibleExists(CPE_NONIJURED_PERSON);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
		GameObjectList SelectPer = Game::GetSelectedGameObjects();
		if (SelectPer.GetNumObjects() > 1)
			return false;
			
		int PersonID = Caller->GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && Caller->GetBoundingRadiusDistXYToObject(&d) < DOG_RANGE)
					return true;
			}
		}				
		
		return false;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target->IsValid())
			return false;
			
		Person pt(Target);
		if(!pt.IsValid() || pt.IsInjured() || pt.IsDead() || pt.GetState() != PERSONSTATE_NORMAL || pt.GetRole() == ROLE_ANIMAL || pt.GetRole() == ROLE_SQUAD)
			return false;
			
		int PersonID = Caller->GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && Caller->GetBoundingRadiusDistXYToObject(&d) < DOG_RANGE)
					SetPriority(805);
			}
		}
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		Person pt(Target);
		if (childID == 0)
		{
			int PersonID = p.GetID();
			GameObjectList list = Game::GetGameObjects(NAME_DOG);
			for(int i = 0; i < list.GetNumObjects(); i++)
			{
				GameObject *obj = list.GetObject(i);
				if (obj->GetUserData() == PersonID)
				{	
					Person d = list.GetObject(0);
					if(p.GetBoundingRadiusDistXYToObject(&d) < DOG_RANGE && d.IsValid() && !d.IsInjured() && !d.IsDead())
					{
						Caller->PushActionSwitchAnim(ACTION_APPEND,"senddog");
						Caller->PushActionWait(ACTION_APPEND,2);
						Caller->PushActionSwitchAnim(ACTION_APPEND,"Idle");
						d.PushActionMove(ACTION_NEWLIST, &pt, TARGET_FOLLOW);
						d.PushActionExecuteCommand(ACTION_APPEND, "PcmdSendDog", &pt, 1, false);						
					} else
					{
						Mission::PlayHint("Police dog is not in range!");
					}
				}
			}
		}
		if (childID == 1)
		{
			if (p.HasAnimation("attack"))
			{
				if (p.GetBoundingRadiusDistXYToObject(&pt) < DOG_STOPPING_RANGE)
				{
					pt.ClearActions();
					if (pt.HasObjectPath(NULL))
						pt.RemoveObjectPath();
					p.PushActionMove(ACTION_NEWLIST, &pt, TARGET_TOUCHPERSON);
					p.PushActionExecuteCommand(ACTION_APPEND, "PcmdSendDog", &pt, 2, false);
				} else
				{
					p.PushActionMove(ACTION_NEWLIST, &pt, TARGET_FOLLOW);
					p.PushActionExecuteCommand(ACTION_APPEND, "PcmdSendDog", &pt, 1, false);
				}
			} else 
			 Mission::PlayHint("This is not a bite dog!");
		}
		if (childID == 2)
		{
			p.ClearActions();
			p.PushActionTurnTo(ACTION_NEWLIST, &pt);
			pt.PushActionTurnTo(ACTION_NEWLIST, &p);
			Audio::PlaySample3D("mod:Audio/FX/animals/doggy01.wav", p.GetPosition());
			p.PushActionSwitchAnim(ACTION_APPEND, "attack");
			p.PushActionWait(ACTION_APPEND, 1.5f);
			p.PushActionExecuteCommand(ACTION_APPEND, "PcmdSendDog", &pt, 3, false);
			pt.Hurt(INJUREREASON_SHOT, 200.f);			
		}
		if (childID == 3)
		{
			if (!pt.IsInjured() && !pt.IsDead())
			{
				Audio::PlaySample3D("mod:Audio/FX/animals/doggy01.wav", p.GetPosition());
				p.PushActionSwitchAnim(ACTION_APPEND, "attack");
				p.PushActionWait(ACTION_APPEND, 1.5f);
				p.PushActionExecuteCommand(ACTION_APPEND, "PcmdSendDog", &pt, 3, false);
				pt.Hurt(INJUREREASON_SHOT, 150.f);
			} else
			{
				p.PushActionSwitchAnim(ACTION_NEWLIST, "idle");
				p.PushActionWait(ACTION_APPEND, DOG_WAITING_TIME);
			}
		}
	}
};

object PcmdCallDog : CommandScript
{
	PcmdCallDog()
	{
		SetIcon("calldog");
		SetCursor("calldog");
		SetValidTargets(ACTOR_PERSON);
		//SetGroupID(CGROUP_DOG);
		SetRestrictions(RESTRICT_NOTARRESTED | RESTRICT_NOTINJURED | RESTRICT_SELFEXECUTE);
		SetDeselectCaller(false);
		SetPriority(300);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;
			
		int PersonID = Caller->GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && Caller->GetBoundingRadiusDistXYToObject(&d) < DOG_RANGE)
					return true;
			}
		}			
			
		return false;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() ||  Caller->IsEquipped() || !Target->IsValid() || Caller->GetID() != Target->GetID())
			return false;
			
		int PersonID = Caller->GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && Caller->GetBoundingRadiusDistXYToObject(&d) < DOG_RANGE)
					SetPriority(805);
			}
		}				
			
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		int PersonID = p.GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead())
				{
					if (d.IsCurrentAnimation("attack") && p.GetBoundingRadiusDistXYToObject(&d) > DOG_ATTACK_RANGE)
						Mission::PlayHint("Police dog is attacking and not in range to be called!");				
					else if (p.GetBoundingRadiusDistXYToObject(&d) > DOG_RANGE)
						Mission::PlayHint("Police dog is not in range!");
					else
					{
						//d.PushActionMove(ACTION_NEWLIST, &p, TARGET_FOLLOW);
						d.PushActionMove(ACTION_NEWLIST, &p, TARGET_TOUCHPERSON);
						d.PushActionWait(ACTION_APPEND, DOG_WAITING_TIME);
					}
				}			
			}
		}
	}
};

object PcmdScare : CommandScript
{
	PcmdScare()
	{
		SetIcon("scare");
		SetCursor("sendpeople");
		SetValidTargets(ACTOR_PERSON);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;
			
		int PersonID = Caller->GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && Caller->GetBoundingRadiusDistXYToObject(&d) < DOG_ATTACK_RANGE)
					return true;
			}
		}			
			
		return false;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() ||  Caller->IsEquipped() || !Target->IsValid() || Caller->GetID() != Target->GetID())
			return false;
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		int PersonID = p.GetID();
		GameObjectList list = Game::GetGameObjects(NAME_DOG);
		for(int i = 0; i < list.GetNumObjects(); i++)
		{
			GameObject *obj = list.GetObject(i);
			if (obj->GetUserData() == PersonID)
			{	
				Person d = list.GetObject(0);
				if (d.IsValid() && !d.IsInjured() && !d.IsDead() && p.GetBoundingRadiusDistXYToObject(&d) < DOG_ATTACK_RANGE)
				{
					if (childID == 0)
					{
						p.SetCommandable(false);
						Audio::PlaySample3D("mod:Audio/FX/animals/doggy01.wav", d.GetPosition());
						d.PushActionSwitchAnim(ACTION_NEWLIST, "attack");
						d.PushActionWait(ACTION_APPEND, 3.f);
						d.PushActionSwitchAnim(ACTION_APPEND, "idle");
						d.PushActionWait(ACTION_APPEND, DOG_WAITING_TIME);
						p.PushActionWait(ACTION_NEWLIST, 1.0f);
						p.PushActionExecuteCommand(ACTION_APPEND, "PcmdScare", Target, 1, false);
						Vector Pos = d.GetPosition();
							float r[9];
						p.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
						d.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
						//Person ph = Game::CreatePerson("mod:Prototypes/Persons/03 LA Police/lapd_officer_m.e4p", NAME_HALT);
						GameObject ph = Game::CreateObject(OBJ_HALT, NAME_HALT);					
						if (ph.IsValid())
						{
							ph.SetPosition(Pos);
							ph.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
							ph.UpdatePlacement();
							ph.PushActionHalt(ACTION_NEWLIST, 250, HALT_PERSONS);
							ph.SetUserData(p.GetID());
							ph.SetSelectable(false);
						}	
					}
					if (childID == 1)
					{
						p.SetCommandable(true);
						int PersonID = p.GetID();
						GameObjectList list = Game::GetGameObjects(NAME_HALT);
						for(int i = 0; i < list.GetNumObjects(); i++)
						{
							GameObject *obj = list.GetObject(i);
							if (obj->GetUserData() == PersonID)
								obj->PushActionDeleteOwner(ACTION_NEWLIST);
						}
					}
				} else
				 Mission::PlayHint("Police dog is not in range!");
			}
		}
	}
};

object DummyDogTaken : CommandScript
{
	DummyDogTaken()
	{
		SetGroupID(DummyGroup);
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};