//******************************************************************************************
//
// DJ Additions:
// - modified to english
// - VcmdParkingChoose
// - VcmdParkingRotate
// - VcmdParkingDrive
//
//******************************************************************************************

//////////////////////////////////////////////////////////////////////////////////
/*Ausrichtungs-Logik                                                            */
/*Script von carli96 und Flo Ko 12/2                                            */
/*�nderungen erlaubt nach Absprache mit carli96 oder Flo Ko 12/2                */
/*Scriptteile k�nnen mit Namensnennung in anderen Scripten verwendet werden     */
//////////////////////////////////////////////////////////////////////////////////

const char OBJ_PARKINGALIGNMENT[] = "mod:Prototypes/Objects/Hilfsobjekte/Ausrichtung.e4p"

const char IMG_PARKINGCHOOSE[] = "parkingchoose";
const char IMG_PARKINGROTATE[] = "rotate_cw"; // Should check if this actually moves CW or CCW
const char IMG_PARKINGDRIVE[] = "parkingdrive";


object VcmdParkingChoose : CommandScript
{
	VcmdParkingChoose()
	{
		SetIcon(IMG_PARKINGCHOOSE);
		SetCursor(IMG_PARKINGCHOOSE);
		SetValidTargets(ACTOR_FLOOR);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (Caller->GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Caller);
			if (v.GetNumPassengers() == 0)
				return false;
			if (v.HasCommand("EngineOns"))
				return false;
		}
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		Vector APos = Game::GetCommandPos();
		Vehicle v(Caller);

		GameObject AO = Game::CreateObject(OBJ_PARKINGALIGNMENT, "Ausrichtung");
		Game::FindFreePosition(&AO, APos, 50.f);
		AO.SetPosition(APos);
		AO.SetSelectable(false);
		Game::ShowHelpTextWindow("Please select the desired rotation and location.");
		v.AssignCommand("VcmdParkingRotate");
		v.AssignCommand("VcmdParkingDrive");
	}
};



object VcmdParkingRotate : CommandScript
{
	VcmdParkingRotate()
	{
		SetIcon(IMG_PARKINGROTATE);
		SetCursor(IMG_PARKINGROTATE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		GameObjectList GOL=Game::GetGameObjects("Ausrichtung");
		GameObject AusrichtungsObjekt;
		for (int i=0;(i<GOL.GetNumObjects());i++)
		{
    		AusrichtungsObjekt = GameObject(GOL.GetObject(i));
    		float rot[9];
    		float childRot[9];
    		AusrichtungsObjekt.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
   			Math::EulerToMatrix(15.f, 0.f, 0.f, childRot); //die erste hier ist die Rotation um die ?-Achse ;)
    		Math::MultiplyMatrices(childRot, rot);
    		AusrichtungsObjekt.SetRotation(childRot[0], childRot[1], childRot[2], childRot[3], childRot[4], childRot[5], childRot[6], childRot[7], childRot[8]);
		}
	}
};


object VcmdParkingDrive : CommandScript
{
	VcmdParkingDrive()
	{
		SetIcon(IMG_PARKINGDRIVE);
		SetCursor(IMG_PARKINGDRIVE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return Target->GetType() == ACTOR_VEHICLE;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		//Person p(Caller);
		Vehicle v(Caller);
		Vector APos;

		GameObjectList gol = Game::GetGameObjects("Ausrichtung");
		GameObject *AO;
		AO = *gol.GetObject(0);

		APos = AO-> GetPosition();

		v.PushActionMove(ACTION_NEWLIST, APos,true);
		v.PushActionExecuteCommand(ACTION_APPEND, "D_VcmdParkingDrive",AO);
		Game::ShowHelpTextWindow("The vehicle is moving to the selected location.");
		v.RemoveCommand("VcmdParkingRotate");
		v.RemoveCommand("VcmdParkingRotate");
		v.RemoveCommand("VcmdParkingDrive");
	}
};


object D_VcmdParkingDrive : CommandScript
{
	D_VcmdParkingDrive()
	{
		SetIcon(IMG_PARKINGDRIVE);
		SetCursor(IMG_PARKINGDRIVE);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		Caller->SetRotation(&GameObject(target));
		GameObject(target).PushActionDeleteOwner(ACTION_NEWLIST);
		Game::ShowHelpTextWindow("The vehicle has reached the desired location.");
	}
};
