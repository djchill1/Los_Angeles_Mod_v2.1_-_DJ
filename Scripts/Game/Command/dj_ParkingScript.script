//////////////////////////////////////////////////////////////////////////////////
/*Ausrichtungs-Logik                                                            */
/*Script von carli96 und Flo Ko 12/2                                            */
/*�nderungen erlaubt nach Absprache mit carli96 oder Flo Ko 12/2                */
/*Scriptteile k�nnen mit Namensnennung in anderen Scripten verwendet werden     */
//////////////////////////////////////////////////////////////////////////////////

const char Prototype_Ausrichtung[] = "mod:Prototypes/Objects/Hilfsobjekte/Ausrichtung.e4p"; //Pfad zum Prototyp des Ausrichtungs-Objekt (AO)

const char IMG1[] = "AOWaehlen"; //Bild zum Icon 1
const char IMG2[] = "Drehen"; //Bild zum Icon 2
const char IMG3[] = "FZFahren"; //Bild zum Icon 3


object AOWaehlen : CommandScript
{
	AOWaehlen()
	{
		SetIcon(IMG1);
		SetCursor(IMG1);
		SetValidTargets(ACTOR_FLOOR);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if(Caller->GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Caller);
			return (v.GetNumPassengers() > 0 && !v.IsInstalled());
		}
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		Vector APos = Game::GetCommandPos();
		Vehicle v(Caller);

		GameObject AO = Game::CreateObject(Prototype_Ausrichtung, "Ausrichtung");
		Game::FindFreePosition(&AO, APos, 100.f);
		AO.SetPosition(APos);
		AO.SetSelectable(false);
		Game::ShowHelpTextWindow("Please select the desired rotation and location.");
		v.AssignCommand("Drehen");
		v.AssignCommand("FZFahren");
	}
};



object Drehen : CommandScript
{
	Drehen()
	{
		SetIcon(IMG2);
		SetCursor(IMG2);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		GameObjectList GOL=Game::GetGameObjects("Ausrichtung");
		GameObject AusrichtungsObjekt;
		for (int i=0;(i<GOL.GetNumObjects());i++)
		{
    		AusrichtungsObjekt = GameObject(GOL.GetObject(i));
    		float rot[9];
    		float childRot[9];
    		AusrichtungsObjekt.GetRotation(rot[0], rot[1], rot[2], rot[3], rot[4], rot[5], rot[6], rot[7], rot[8]);
   			Math::EulerToMatrix(10.f, 0.f, 0.f, childRot); // rotation angle?
    		Math::MultiplyMatrices(childRot, rot);
    		AusrichtungsObjekt.SetRotation(childRot[0], childRot[1], childRot[2], childRot[3], childRot[4], childRot[5], childRot[6], childRot[7], childRot[8]);
		}
	}
};


object FZFahren : CommandScript
{
	FZFahren()
	{
		SetIcon(IMG3);
		SetCursor(IMG3);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return Target->GetType() == ACTOR_VEHICLE;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		//Person p(Caller);
		Vehicle v(Caller);
		Vector APos;

		GameObjectList gol = Game::GetGameObjects("Ausrichtung");
		GameObject *AO;
		AO = *gol.GetObject(0);

		APos = AO-> GetPosition();

		v.PushActionMove(ACTION_NEWLIST, APos,true);
		v.PushActionExecuteCommand(ACTION_APPEND, "D_Drehen",AO);
		Game::ShowHelpTextWindow("The vehicle is moving to the selected location.");
		v.RemoveCommand("Drehen");
		v.RemoveCommand("Drehen");
		v.RemoveCommand("FZFahren");
	}
};


object D_Drehen : CommandScript
{
	D_Drehen()
	{
		SetIcon(IMG3);
		SetCursor(IMG3);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *target, int childID)
	{
		Caller->SetRotation(&GameObject(target));
		GameObject(target).PushActionDeleteOwner(ACTION_NEWLIST);
		Game::ShowHelpTextWindow("The vehicle has reached the desired location.");
	}
};
