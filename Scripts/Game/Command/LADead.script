//******************************************************************************************
// #Version 1.1#
//
// 		Includes: All commands to cover dead bodies with a blanket
//
//	- PcmdDead
//
//		Script by Hoppah
//		
//		Usage of this script in other mods is NOT allowed without permission of Hoppah
//
//******************************************************************************************

const char CMD_DEAD[]			= "PcmdDead";
const char OBJ_BLANKET[] 		= "mod:Models/Objects/06 LA Misc/body_cover";
const char PROTO_BLANKET[] 		= "mod:Prototypes/Objects/06 LA Misc/body_cover.e4p";
const char HINT_DEAD[]			= "This person is deceased.";

int DummyGroup = 22;

object PcmdDead : CommandScript
{
	PcmdDead()
	{
		SetIcon("heal");
		SetCursor("heal");
		SetValidTargets(ACTOR_PERSON);
		SetGroupID(CGROUP_CARRY_PERSON);
		SetPriority(410);
		SetValidTargets(ACTOR_PERSON);
		SetRestrictions(RESTRICT_NOTARRESTED);
		SetPossibleCallers(ACTOR_PERSON);
		SetPossibleExists(CPE_INJURED_PERSON);
	}

	bool CheckPossible(GameObject *Caller)
	{
		Person p(Caller);
		if(!p.IsValid() || p.IsLinkedWithPerson() || p.IsCarryingPerson() || p.GetEnteredCarID() != -1 || p.IsPhysicsSimulationEnabled())
			return false;
			
		if(p.IsParamedicTeam() && p.IsCarryingPerson())
			return false;

		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() ||  Caller->IsEquipped() || !Target->IsValid() || Target->GetID() == Caller->GetID())
			return false;
		
		Person t(Target);
		if (t.GetRole() == ROLE_ANIMAL)
			return false;
	
		if(t.IsDead())
			SetPriority(420);			
		
		return (t.IsDead() && !t.IsCarried() && t.IsClassified());
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		Person t(Target);
		
		if (p.GetEnteredHouseID() != -1)
		{
			Actor ha = Game::GetActor(p.GetEnteredHouseID());
			OpenHouse sourceHouse(&ha);
			if (!sourceHouse.HasGroundEntrance())
				return;
		}		
		if (childID == 0)
		{
			Mission::PlayHint(HINT_DEAD);
			if (p.IsParamedicTeam())
			{
				p.PushActionSwitchAnim(ACTION_NEWLIST, "paramedictreat_down");
				p.PushActionWait(ACTION_APPEND, 2.f);
				p.PushActionSwitchAnim(ACTION_APPEND, "paramedictreat");
				p.PushActionWait(ACTION_APPEND, 0.5f);
				p.PushActionExecuteCommand(ACTION_APPEND, CMD_DEAD, &t, 1, false);
				p.PushActionWait(ACTION_APPEND, 1.f);
				p.PushActionExecuteCommand(ACTION_APPEND, CMD_DEAD, &t, 2, false);
				p.PushActionWait(ACTION_APPEND, 3.f);
				p.PushActionSwitchAnim(ACTION_APPEND, "paramedictreat_up");
			} else
			{
				p.PushActionSwitchAnim(ACTION_NEWLIST, "treatinjured1");
				p.PushActionWait(ACTION_APPEND, 0.5f);
				p.PushActionExecuteCommand(ACTION_APPEND, CMD_DEAD, &t, 1, false);
				p.PushActionWait(ACTION_APPEND, 1.f);
				p.PushActionExecuteCommand(ACTION_APPEND, CMD_DEAD, &t, 2, false);
				p.PushActionWait(ACTION_APPEND, 3.f);
				p.PushActionSwitchAnim(ACTION_APPEND, "idle");
			}
		}
		if (childID == 1)
		{
			Vector Pos = t.GetPosition();
				float r[9];
			t.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			GameObject o = Game::CreateObject(PROTO_BLANKET, "Unnamed");
			o.SetPosition(Pos);
			o.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			o.PushActionSwitchAnim(ACTION_NEWLIST, "cover");
			o.PushActionWait(ACTION_APPEND, 1.0f);
			o.PushActionDeleteOwner(ACTION_APPEND);
		}
		if (childID == 2)
		{
			t.ChangeModel(OBJ_BLANKET);
			t.AssignCommand("DummyBlanket");
		}
	}
};

object DummyBlanket : CommandScript
{
	DummyBlanket()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return false;
	}

  	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
	}
};